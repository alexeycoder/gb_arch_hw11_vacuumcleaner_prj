/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Group;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-09-27T16:36:05.325149630Z[GMT]")
@Validated
public interface GroupsApi {

    @Operation(summary = "Добавить группу", description = "Добавить группу пользователей совместного пользования устройствами", tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid group data supplied"),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/groups",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addGroup(@Parameter(in = ParameterIn.HEADER, description = "Имя для входа пользователя" ,required=true,schema=@Schema()) @RequestHeader(value="username", required=true) Object username
, @Parameter(in = ParameterIn.DEFAULT, description = "Создание новой группы пользоватей в базе", required=true, schema=@Schema()) @Valid @RequestBody Group body
);


    @Operation(summary = "Удаляет пользователя", description = "Удаляет пользователя", tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Deleted successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/groups/{groupId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteGroup(@Parameter(in = ParameterIn.HEADER, description = "Имя для входа пользователя" ,required=true,schema=@Schema()) @RequestHeader(value="username", required=true) Object username
, @Parameter(in = ParameterIn.PATH, description = "Идентификатор группы", required=true, schema=@Schema()) @PathVariable("groupId") Object groupId
);


    @Operation(summary = "Найти группу по идентификатору", description = "вернуть группу", tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Group not found") })
    @RequestMapping(value = "/groups/{groupId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Group> findGroupById(@Parameter(in = ParameterIn.HEADER, description = "Имя для входа пользователя" ,required=true,schema=@Schema()) @RequestHeader(value="username", required=true) Object username
, @Parameter(in = ParameterIn.PATH, description = "Идентификатор группы", required=true, schema=@Schema()) @PathVariable("groupId") Object groupId
);


    @Operation(summary = "Обновить группу", description = "Обновить группу пользователей совместного пользования устройствами", tags={ "groups" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Group not found") })
    @RequestMapping(value = "/groups/{groupId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateGroup(@Parameter(in = ParameterIn.HEADER, description = "Имя для входа пользователя" ,required=true,schema=@Schema()) @RequestHeader(value="username", required=true) Object username
, @Parameter(in = ParameterIn.PATH, description = "Идентификатор группы", required=true, schema=@Schema()) @PathVariable("groupId") Object groupId
, @Parameter(in = ParameterIn.DEFAULT, description = "Обновить группу", required=true, schema=@Schema()) @Valid @RequestBody Group body
);

}

